"use client"
import React, { useEffect, useState } from 'react';
import { ProductCard } from './ProductCard';
import Modal from '../common/Modal';
import Uploader from '../common/Uploader';

export const ProductList = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [products, setProducts] = useState<IProduct[]>([
        {
            "id": "1",
            "name": "Wireless Mouse",
            "image": "https://example.com/images/wireless-mouse.jpg",
            "price": 29.99,
            "stock": 150,
            "description": "A high-precision wireless mouse with long battery life.",
            "category": "Electronics",
        },
        {
            "id": "2",
            "name": "Bluetooth Headphones",
            "image": "https://example.com/images/bluetooth-headphones.jpg",
            "price": 59.99,
            "stock": 75,
            "description": "Noise-cancelling Bluetooth headphones with superior sound quality.",
            "category": "Audio",
        },
        {
            "id": "3",
            "name": "Smartphone Stand",
            "image": "https://example.com/images/smartphone-stand.jpg",
            "price": 15.99,
            "stock": 200,
            "description": "Adjustable stand for smartphones and tablets.",
            "category": "Accessories",
        },
        {
            "id": "4",
            "name": "USB-C Hub",
            "image": "https://example.com/images/usb-c-hub.jpg",
            "price": 39.99,
            "stock": 100,
            "description": "Multi-port USB-C hub with HDMI, USB-A, and SD card slots.",
            "category": "Computer Peripherals",
        },
        {
            "id": "5",
            "name": "Wireless Charger",
            "image": "https://example.com/images/wireless-charger.jpg",
            "price": 25.99,
            "stock": 180,
            "description": "Fast wireless charger compatible with all Qi-enabled devices.",
            "category": "Mobile Accessories",
        }
    ]
    );
    const [showAddModal, setShowAddModal] = useState(false); // State for add product modal
    const [showBulkUploadModal, setShowBulkUploadModall] =
    useState<boolean>(false);
    const [newProduct, setNewProduct] = useState<IProduct>({
        id: '', // Assuming ID will be generated by the backend
        name: '',
        price: 0,
        description: '',
        category: '',
        image: '',
        stock: 0,
    }); // State for the new product details

    // const filteredProducts = products.filter((product: IProduct) =>
    //     product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    //     product.category?.toLowerCase().includes(searchTerm.toLowerCase())
    // );
    const filteredProducts = [
    {
        "id": "1",
        "name": "Wireless Mouse",
        "image": "https://example.com/images/wireless-mouse.jpg",
        "price": 29.99,
        "stock": 150,
        "description": "A high-precision wireless mouse with long battery life.",
        "category": "Electronics",
        "createdAt": "2024-01-15T08:00:00Z"
    },
    {
        "id": "2",
        "name": "Bluetooth Headphones",
        "image": "https://example.com/images/bluetooth-headphones.jpg",
        "price": 59.99,
        "stock": 75,
        "description": "Noise-cancelling Bluetooth headphones with superior sound quality.",
        "category": "Audio",
        "createdAt": "2024-01-20T12:00:00Z"
    },
    {
        "id": "3",
        "name": "Smartphone Stand",
        "image": "https://example.com/images/smartphone-stand.jpg",
        "price": 15.99,
        "stock": 200,
        "description": "Adjustable stand for smartphones and tablets.",
        "category": "Accessories",
        "createdAt": "2024-02-05T10:30:00Z"
    },
    {
        "id": "4",
        "name": "USB-C Hub",
        "image": "https://example.com/images/usb-c-hub.jpg",
        "price": 39.99,
        "stock": 100,
        "description": "Multi-port USB-C hub with HDMI, USB-A, and SD card slots.",
        "category": "Computer Peripherals",
        "createdAt": "2024-02-10T09:15:00Z"
    },
    {
        "id": "5",
        "name": "Wireless Charger",
        "image": "https://example.com/images/wireless-charger.jpg",
        "price": 25.99,
        "stock": 180,
        "description": "Fast wireless charger compatible with all Qi-enabled devices.",
        "category": "Mobile Accessories",
        "createdAt": "2024-02-15T14:45:00Z"
    }
]

    // Fetch data from the API during build time
    async function getStaticProps() {
        const res = await fetch('api/product/list');
        const products: IProduct[] = await res.json();
        setProducts(products);
    }

    async function editProduct(product: IProduct) {
        try {
            const res = await fetch('/api/product', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(product),
            });

            if (!res.ok) {
                const errorResponse = await res.json(); // Capture error response
                throw new Error(errorResponse.error || 'Failed to update product');
            }

            const updatedProducts: IProduct[] = await res.json();
            setProducts(updatedProducts);
        } catch (error) {
            console.error('Error updating product:', error);
        }
    }

    // Fetch data from the API during build time
    async function deletedProduct(id: string) {
        const res = await fetch(`api/product?id=` + id, {
            method: 'DELETE',
          });
        const products: IProduct[] = await res.json();
        setProducts(products);
    }

    // Function to add a new product
    const addProduct = async (newProduct: IProduct) => {
        try {
            const res = await fetch('/api/product/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newProduct),
            });

            if (!res.ok) {
                const errorResponse = await res.json(); // Capture error response
                throw new Error(errorResponse.error || 'Failed to add product');
            }

            const updatedProducts: IProduct[] = await res.json();
            setProducts(updatedProducts);
            setShowAddModal(false); // Close the modal after adding
            setNewProduct({ id: '', name: '', price: 0, description: '', category: '', image: '', stock: 0 }); // Reset new product
        } catch (error) {
            console.error('Error adding product:', error);
        }
    };

    const getParsedData = (data: IProductCSV[]): IProduct[] => {
        const today = new Date().toISOString(); // Get current date in ISO format
      
        return data.map((item, index) => {
          // Construct product object
          const product: IProduct = {
            id: generateUUID(), // Generate unique product id
            name: item.name || 'Unknown Product', // Default name if missing
            image: item.image || "", // Default image to null if not provided
            price: item.price || 0, // Default price to 0 if not provided
            stock: item.stock || 0, // Default stock to 0 if not provided
            description: item.description || "", // Default description to null if not provided
            category: item.category || "", // Default category to null if not provided
          };
      
          return product;
        });
    }
    const bulkUploadOrders = async(data: IProductCSV[]) => {
        const parsedData : IProduct[]= getParsedData(data);

        try {
        const response = await fetch("/api/product/bulk", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(parsedData),
        });
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        const result = await response.json();
        setProducts(result);
        setShowBulkUploadModall(false);
        console.log("Bulk Upload successfully:", result);
        } catch (error) {
        console.error("Error placing order:", error);
        }
    }

    useEffect(() => {
        getStaticProps();
    }, []);

    return (
        <div className="container mx-auto py-8 px-8 bg-white">
            {showBulkUploadModal && (
            <Modal
              show={showBulkUploadModal}
              onClose={() => setShowBulkUploadModall(false)}
            >
              <Uploader<IProductCSV>
                text="Upload Product Data"
                handleUpload={bulkUploadOrders}
              />
            </Modal>
          )}
            <div className="flex justify-between items-center mb-6">
                <input
                    type="text"
                    placeholder="Search products..."
                    className="w-full p-2 border rounded text-black"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
                <button
                    className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition duration-200 ml-4"
                    onClick={() => setShowAddModal(true)} // Open add product modal
                >
                    Add
                </button>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {filteredProducts.map(product => (
                    <ProductCard key={product.id} product={product} onEdit={editProduct} onDelete={deletedProduct} />
                ))}
            </div>

            {/* Add Product Modal */}
            {showAddModal && (
                    <Modal show={showAddModal} onClose={() => { setShowAddModal(false)}}>
                        <h3 className="text-lg font-semibold mb-4 text-gray-800">Add Product</h3>
                        <form onSubmit={(e) => { e.preventDefault(); addProduct(newProduct); }} className="space-y-4">
                            <div>
                                <label className="block text-gray-700">Product Name</label>
                                <input
                                    type="text"
                                    name="name"
                                    value={newProduct.name}
                                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Category</label>
                                <input
                                    type="text"
                                    name="category"
                                    value={newProduct.category}
                                    onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Price</label>
                                <input
                                    type="number"
                                    name="price"
                                    value={newProduct.price}
                                    onChange={(e) => setNewProduct({ ...newProduct, price: Number(e.target.value) })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Image URL</label>
                                <input
                                    type="text"
                                    name="image"
                                    value={newProduct.image}
                                    onChange={(e) => setNewProduct({ ...newProduct, image: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Stock</label>
                                <input
                                    type="number"
                                    name="stock"
                                    value={newProduct.stock}
                                    onChange={(e) => setNewProduct({ ...newProduct, stock: Number(e.target.value) })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>

                            <div className="flex justify-end space-x-4">
                                <button
                                    type="button"
                                    className="bg-gray-200 text-gray-800 py-2 px-4 rounded hover:bg-gray-300"
                                    onClick={() => setShowAddModal(false)} // Close modal without adding
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
                                >
                                    Add
                                </button>
                            </div>
                        </form>
                </Modal>
            )}
        </div>
    );
};
