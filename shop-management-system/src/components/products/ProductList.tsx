"use client"
import React, { useEffect, useState } from 'react';
import { ProductCard } from './ProductCard';
import { IProduct } from '@/type/product/product';

export const ProductList = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [products, setProducts] = useState<IProduct[]>([]);
    const [showAddModal, setShowAddModal] = useState(false); // State for add product modal
    const [newProduct, setNewProduct] = useState<IProduct>({
        id: '', // Assuming ID will be generated by the backend
        name: '',
        price: '',
        description: '',
        category: '',
        image: '',
        stock: 0,
        createdAt: String(Date.now())
    }); // State for the new product details

    const filteredProducts = products.filter((product: IProduct) =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.category.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Fetch data from the API during build time
    async function getStaticProps() {
        const res = await fetch('api/product/list');
        const products: IProduct[] = await res.json();
        setProducts(products);
    }

    async function editProduct(product: IProduct) {
        try {
            const res = await fetch('/api/product/edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(product),
            });

            if (!res.ok) {
                const errorResponse = await res.json(); // Capture error response
                throw new Error(errorResponse.error || 'Failed to update product');
            }

            const updatedProducts: IProduct[] = await res.json();
            setProducts(updatedProducts);
        } catch (error) {
            console.error('Error updating product:', error);
        }
    }

    // Fetch data from the API during build time
    async function deletedProduct(id: string) {
        const res = await fetch(`api/product/delete?id=` + id);
        const products: IProduct[] = await res.json();
        setProducts(products);
    }

    // Function to add a new product
    const addProduct = async (newProduct: IProduct) => {
        try {
            const res = await fetch('/api/product/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newProduct),
            });

            if (!res.ok) {
                const errorResponse = await res.json(); // Capture error response
                throw new Error(errorResponse.error || 'Failed to add product');
            }

            const updatedProducts: IProduct[] = await res.json();
            setProducts(updatedProducts);
            setShowAddModal(false); // Close the modal after adding
            setNewProduct({ id: '', name: '', price: '', description: '', category: '', image: '', stock: 0, createdAt: String(Date.now()) }); // Reset new product
        } catch (error) {
            console.error('Error adding product:', error);
        }
    };

    useEffect(() => {
        getStaticProps();
    }, []);

    return (
        <div className="container mx-auto py-8 px-8 bg-white">
            <div className="flex justify-between items-center mb-6">
                <input
                    type="text"
                    placeholder="Search products..."
                    className="w-full p-2 border rounded text-black"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
                <button
                    className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 transition duration-200 ml-4"
                    onClick={() => setShowAddModal(true)} // Open add product modal
                >
                    Add
                </button>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {filteredProducts.map(product => (
                    <ProductCard key={product.id} product={product} onEdit={editProduct} onDelete={deletedProduct} />
                ))}
            </div>

            {/* Add Product Modal */}
            {showAddModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg">
                        <h3 className="text-lg font-semibold mb-4 text-gray-800">Add Product</h3>
                        <form onSubmit={(e) => { e.preventDefault(); addProduct(newProduct); }} className="space-y-4">
                            <div>
                                <label className="block text-gray-700">Product Name</label>
                                <input
                                    type="text"
                                    name="name"
                                    value={newProduct.name}
                                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Category</label>
                                <input
                                    type="text"
                                    name="category"
                                    value={newProduct.category}
                                    onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Price</label>
                                <input
                                    type="text"
                                    name="price"
                                    value={newProduct.price}
                                    onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Image URL</label>
                                <input
                                    type="text"
                                    name="image"
                                    value={newProduct.image}
                                    onChange={(e) => setNewProduct({ ...newProduct, image: e.target.value })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700">Stock</label>
                                <input
                                    type="number"
                                    name="stock"
                                    value={newProduct.stock}
                                    onChange={(e) => setNewProduct({ ...newProduct, stock: Number(e.target.value) })}
                                    className="w-full p-2 border rounded text-gray-700"
                                />
                            </div>

                            <div className="flex justify-end space-x-4">
                                <button
                                    type="button"
                                    className="bg-gray-200 text-gray-800 py-2 px-4 rounded hover:bg-gray-300"
                                    onClick={() => setShowAddModal(false)} // Close modal without adding
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
                                >
                                    Add
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};
